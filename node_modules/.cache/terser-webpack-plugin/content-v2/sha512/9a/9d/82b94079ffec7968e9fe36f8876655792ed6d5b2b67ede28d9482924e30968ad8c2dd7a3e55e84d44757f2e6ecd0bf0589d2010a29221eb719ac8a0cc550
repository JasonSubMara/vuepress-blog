{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{314:function(a,r,e){\"use strict\";e.r(r);var t=e(22),s=Object(t.a)({},(function(){var a=this,r=a.$createElement,e=a._self._c||r;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[e(\"p\",[a._v(\"前段时间接手一个项目，逻辑晦涩难懂，代码庞大冗余，上手极其困难。很大的原因就是数组方法使用不熟练，导致写出了很多垃圾代码，其实很多地方稍加改动就可以变得简单高效又优雅。因此我在这里总结下数组的常用方法和奇巧淫技（奇巧淫技主要是reduce~）。\")]),a._v(\" \"),e(\"p\",[a._v(\"数组操作首先要注意且牢记\"),e(\"code\",[a._v(\"splice、sort、reverse\")]),a._v(\"这3个常用方法是对数组自身的操作，会改变数组自身。其他会改变自身的方法是增删\"),e(\"code\",[a._v(\"push/pop/unshift/shift\")]),a._v(\"、填充\"),e(\"code\",[a._v(\"fill\")]),a._v(\"和复制填充\"),e(\"code\",[a._v(\"copyWithin\")]),a._v(\"。\")]),a._v(\" \"),e(\"p\",[a._v(\"先说数组常用方法，后说使用误区。\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"数组常用方法\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组常用方法\"}},[a._v(\"#\")]),a._v(\" 数组常用方法\")]),a._v(\" \"),e(\"p\",[a._v(\"先献上数组方法懒人图一张祭天！（除了\"),e(\"code\",[a._v(\"Array.keys()/Array.values()/Array.entries()\")]),a._v(\"基本都有）：\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://upload-images.jianshu.io/upload_images/20151630-0df6ad2ce3a8777d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\",alt:\"image\"}})]),a._v(\" \"),e(\"figcaption\",{staticStyle:{margin:\"5px 0px 0px\",padding:\"0px\",\"max-width\":\"100%\",\"box-sizing\":\"border-box !important\",\"word-wrap\":\"break-word !important\",\"text-align\":\"center\",color:\"rgb(136, 136, 136)\",\"font-size\":\"14px\"}},[a._v(\"数组方法大全\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"生成类似-1-100-这样的的数组\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#生成类似-1-100-这样的的数组\"}},[a._v(\"#\")]),a._v(\" 生成类似[1-100]这样的的数组：\")]),a._v(\" \"),e(\"p\",[a._v(\"测试大量数组数据时可以：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"let arr = new Array(100).fill(0).map((item, index) => index + 1)\\n\")])])]),e(\"h3\",{attrs:{id:\"数组解构赋值应用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组解构赋值应用\"}},[a._v(\"#\")]),a._v(\" 数组解构赋值应用\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"// 交换变量\\n\")])])]),e(\"h3\",{attrs:{id:\"数组浅拷贝\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组浅拷贝\"}},[a._v(\"#\")]),a._v(\" 数组浅拷贝\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = [1, 2, 3]\\n\")])])]),e(\"p\",[a._v(\"浅拷贝方法有很多如\"),e(\"code\",[a._v(\"arr.slice(0, arr.length)/Arror.from(arr)\")]),a._v(\"等，但是用了\"),e(\"code\",[a._v(\"...\")]),a._v(\"操作符之后就不会再想用其他的了~\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"数组合并\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组合并\"}},[a._v(\"#\")]),a._v(\" 数组合并\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr1 = [1, 2, 3]\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"arr1.concat(arr2, arr3)\")]),a._v(\"同样可以实现合并，但是用了\"),e(\"code\",[a._v(\"...\")]),a._v(\"操作符之后就不会再想用其他的了~\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"数组去重\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组去重\"}},[a._v(\"#\")]),a._v(\" 数组去重\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = [1, 1, 2, 2, 3, 4, 5, 5]\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"new Set(arr)\")]),a._v(\"接受一个数组参数并生成一个set结构的数据类型。set数据类型的元素不会重复且是\"),e(\"code\",[a._v(\"Array Iterator\")]),a._v(\"，所以可以利用这个特性来去重。\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"数组取交集\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组取交集\"}},[a._v(\"#\")]),a._v(\" 数组取交集\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const a = [0, 1, 2, 3, 4, 5]\\n\")])])]),e(\"h3\",{attrs:{id:\"数组取差集\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组取差集\"}},[a._v(\"#\")]),a._v(\" 数组取差集\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const a = [0, 1, 2, 3, 4, 5]\\n\")])])]),e(\"h3\",{attrs:{id:\"数组转对象\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组转对象\"}},[a._v(\"#\")]),a._v(\" 数组转对象\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = [1, 2, 3, 4]\\n\")])])]),e(\"h2\",{attrs:{id:\"数组常用遍历\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组常用遍历\"}},[a._v(\"#\")]),a._v(\" 数组常用遍历\")]),a._v(\" \"),e(\"p\",[a._v(\"数组常用遍历有 \"),e(\"code\",[a._v(\"forEach、every、some、filter、map、reduce、reduceRight、find、findIndex\")]),a._v(\" 等方法，很多方法都可以达到同样的效果。数组方法不仅要会用，而且要用好。要用好就要知道什么时候用什么方法。\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"遍历的混合使用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#遍历的混合使用\"}},[a._v(\"#\")]),a._v(\" 遍历的混合使用\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"filter\")]),a._v(\"、\"),e(\"code\",[a._v(\"map\")]),a._v(\"方法返回值仍旧是一个数组，所以可以搭配其他数组遍历方法混合使用。注意遍历越多效率越低~\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = [1, 2, 3, 4, 5]\\n\")])])]),e(\"h3\",{attrs:{id:\"检测数组所有元素是否都符合判断条件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#检测数组所有元素是否都符合判断条件\"}},[a._v(\"#\")]),a._v(\" 检测数组所有元素是否都符合判断条件\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = [1, 2, 3, 4, 5]\\n\")])])]),e(\"h3\",{attrs:{id:\"检测数组是否有元素符合判断条件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#检测数组是否有元素符合判断条件\"}},[a._v(\"#\")]),a._v(\" 检测数组是否有元素符合判断条件\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = [1, 2, 3, 4, 5]\\n\")])])]),e(\"h3\",{attrs:{id:\"找到第一个符合条件的元素-下标\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#找到第一个符合条件的元素-下标\"}},[a._v(\"#\")]),a._v(\" 找到第一个符合条件的元素/下标\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = [1, 2, 3, 4, 5]\\n\")])])]),e(\"h2\",{attrs:{id:\"数组使用误区\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组使用误区\"}},[a._v(\"#\")]),a._v(\" 数组使用误区\")]),a._v(\" \"),e(\"p\",[a._v(\"数组的方法很多，很多方法都可以达到同样的效果，所以在使用时要根据需求使用合适的方法。\")]),a._v(\" \"),e(\"p\",[a._v(\"垃圾代码产生的很大原因是数组常用方法使用不当，这里有一下需要注意的点：\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"array-includes-和-array-indexof\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#array-includes-和-array-indexof\"}},[a._v(\"#\")]),a._v(\" array.includes() 和 array.indexOf()\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"array.includes()\")]),a._v(\" 返回布尔值，\"),e(\"code\",[a._v(\"array.indexOf()\")]),a._v(\" 返回数组子项的索引。\"),e(\"code\",[a._v(\"indexOf\")]),a._v(\" 一定要在需要索引值的情况下使用。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = [1, 2, 3, 4, 5]\\n\")])])]),e(\"h3\",{attrs:{id:\"array-find-、-array-findindex-和-array-some\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#array-find-、-array-findindex-和-array-some\"}},[a._v(\"#\")]),a._v(\" array.find() 、 array.findIndex() 和 array.some()\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"array.find()\")]),a._v(\"返回值是第一个符合条件的数组子项，\"),e(\"code\",[a._v(\"array.findIndex()\")]),a._v(\" 返回第一个符合条件的数组子项的下标，\"),e(\"code\",[a._v(\"array.some()\")]),a._v(\" 返回有无复合条件的子项，如有返回\"),e(\"code\",[a._v(\"true\")]),a._v(\"，若无返回\"),e(\"code\",[a._v(\"false\")]),a._v(\"。注意这三个都是短路操作，即找到符合条件的之后就不在继续遍历。\")]),a._v(\" \"),e(\"p\",[a._v(\"在需要数组的子项的时候使用\"),e(\"code\",[a._v(\"array.find()\")]),a._v(\" ；需要子项的索引值的时候使用 \"),e(\"code\",[a._v(\"array.findIndex()\")]),a._v(\" ；而若只需要知道有无符合条件的子项，则用 \"),e(\"code\",[a._v(\"array.some()\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = [{label: '男', value: 0}, {label: '女', value: 1}, {label: '不男不女', value: 2}]\\n\")])])]),e(\"p\",[a._v(\"建议在只需要布尔值的时候和数组子项是字符串或数字的时候使用 \"),e(\"code\",[a._v(\"array.some()\")]),a._v(\"：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"// 当子包含数字0的时候可能出错\\n\")])])]),e(\"h3\",{attrs:{id:\"array-find-和-array-filter\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#array-find-和-array-filter\"}},[a._v(\"#\")]),a._v(\" array.find() 和 array.filter()\")]),a._v(\" \"),e(\"p\",[a._v(\"只需要知道 \"),e(\"code\",[a._v(\"array.filter()\")]),a._v(\" 返回的是所有符合条件的子项组成的数组，会遍历所有数组；而\"),e(\"code\",[a._v(\"array.find()\")]),a._v(\" 只返回第一个符合条件的子项，是短路操作。不再举例~\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"合理使用-set-数据结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#合理使用-set-数据结构\"}},[a._v(\"#\")]),a._v(\" 合理使用 Set 数据结构\")]),a._v(\" \"),e(\"p\",[a._v(\"由于 es6 原生提供了 \"),e(\"code\",[a._v(\"Set\")]),a._v(\" 数据结构，而 \"),e(\"code\",[a._v(\"Set\")]),a._v(\" 可以保证子项不重复，且和数组转换十分方便，所以在一些可能会涉及重复添加的场景下可以直接使用 \"),e(\"code\",[a._v(\"Set\")]),a._v(\" 代替 \"),e(\"code\",[a._v(\"Array\")]),a._v(\"，避免了多个地方重复判断是否已经存在该子项。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const set = new Set()\\n\")])])]),e(\"h3\",{attrs:{id:\"强大的reduce\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#强大的reduce\"}},[a._v(\"#\")]),a._v(\" 强大的reduce\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"array.reduce\")]),a._v(\" 遍历并将当前次回调函数的返回值作为下一次回调函数执行的第一个参数。\")]),a._v(\" \"),e(\"p\",[a._v(\"利用 \"),e(\"code\",[a._v(\"array.reduce\")]),a._v(\" 替代一些需要多次遍历的场景，可以提高代码运行效率。\")]),a._v(\" \"),e(\"p\",[a._v(\"假如有如下每个元素都由字母's'加数字组成的数组\"),e(\"code\",[a._v(\"arr\")]),a._v(\"，现在找出其中最大的数字：（\"),e(\"code\",[a._v(\"arr\")]),a._v(\"不为空）\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = ['s0', 's4', 's1', 's2', 's8', 's3']\\n\")])])]),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"const arr = [1, 2, 3, 4, 5]\\n\")])])]),e(\"p\",[a._v(\"也可用 reduce 做下面这样的处理来生成想要的 html 结构：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"// 后端返回数据\\n\")])])]),e(\"p\",[a._v(\"生成的 html 结构如下：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('<ul class=\"nlp-notify-body\">            \\n')])])])])}),[],!1,null,null,null);r.default=s.exports}}]);","extractedComments":[]}